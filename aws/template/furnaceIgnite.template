{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "ECSInstanceType": {
            "Type": "String",
            "Default": "t2.micro",
            "Description": "EC2 instance type to use for ECS Cluster."
        },
        "ClusterName": {
            "Type": "String",
            "Default": "furnaceIgnite",
            "Description": "The name to use for the ECS Cluster."
        },
        "TaskName": {
            "Type": "String",
            "Default": "stackUpdaterTask",
            "Description": "The name to use for the stack updater task."
        },
        "TaskContainerImage": {
            "Type": "String",
            "Default": "projectfurnace/deploy-aws:latest",
            "Description": "The docker image to use for the Stack Updater Task"
        },
        "TaskContainerName": {
            "Type": "String",
            "Default": "stackUpdater",
            "Description": "The container name for the Stack Updater Task"
        },
        "BootstrapCodeBucketName": {
            "Type": "String",
            "Description": "The name of the bootstrap code bucket."
        },
        "ArtifactBucketName": {
            "Type": "String",
            "Description": "The name of the artifact bucket."
        },
        "GitUsername": {
            "Type": "String",
            "Description": "GIT token (stringified {token: <token>}",
            "Default": "",
            "NoEcho": true
        },
        "GitToken": {
            "Type": "String",
            "Description": "GIT token",
            "Default": "",
            "NoEcho": true
        },
        "GitHookSecret": {
            "Type": "String",
            "Description": "Git hook secret",
            "Default": "",
            "NoEcho": true
        },
        "NpmToken": {
            "Type": "String",
            "Description": "NPM Token for private repos",
            "Default": "",
            "NoEcho": true
        },
        "ApiKey": {
            "Type": "String",
            "Description": "API Key for CLI auth",
            "Default": "",
            "NoEcho": true
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-2": {
                "AMI": "ami-012ca23958772cf72"
            },
            "us-east-1": {
                "AMI": "ami-00cf4737e238866a3"
            },
            "us-west-2": {
                "AMI": "ami-06d87f0156b1d4407"
            },
            "us-west-1": {
                "AMI": "ami-0a9f5be2a016dccad"
            },
            "eu-west-3": {
                "AMI": "ami-07273195833e4f20c"
            },
            "eu-west-2": {
                "AMI": "ami-0204aa6a92a54561e"
            },
            "eu-west-1": {
                "AMI": "ami-0c5abd45f676aab4f"
            },
            "eu-central-1": {
                "AMI": "ami-096a38c97b80cd8ec"
            },
            "eu-north-1": {
                "AMI": "ami-0dddc4daca44e6e99"
            },
            "ap-northeast-2": {
                "AMI": "ami-00294948a592fc052"
            },
            "ap-northeast-1": {
                "AMI": "ami-0e52aad6ac7733a6a"
            },
            "ap-southeast-2": {
                "AMI": "ami-09475847322e5566f"
            },
            "ap-southeast-1": {
                "AMI": "ami-0047bfdb16f1f6781"
            },
            "ca-central-1": {
                "AMI": "ami-0498c464ec4d2ba83"
            },
            "ap-south-1": {
                "AMI": "ami-04322e867758d97a8"
            },
            "ap-east-1": {
                "AMI": "ami-067f4f7124e746edd"
            },
            "sa-east-1": {
                "AMI": "ami-00d851648873aaabc"
            },
            "us-gov-west-1": {
                "AMI": "ami-607c0001"
            },
            "us-gov-east-1": {
                "AMI": "ami-06473be43b0f77600"
            }
        }
    },
    "Conditions": {
        "GitTokenDefined": {
            "Fn::Not": [{
                "Fn::Equals": [{
                    "Ref": "GitToken"
                }, ""]
            }]
        },
        "GitUsernameDefined": {
            "Fn::Not": [{
                "Fn::Equals": [{
                    "Ref": "GitUsername"
                }, ""]
            }]
        },
        "GitHookSecretDefined": {
            "Fn::Not": [{
                "Fn::Equals": [{
                    "Ref": "GitHookSecret"
                }, ""]
            }]
        },
        "NpmTokenDefined": {
            "Fn::Not": [{
                "Fn::Equals": [{
                    "Ref": "NpmToken"
                }, ""]
            }]
        },
        "NpmOrGitDefined": {
            "Fn::Or": [{
                "Condition": "GitTokenDefined"
            }, {
                "Condition": "NpmTokenDefined"
            }]
        },
        "ApiKeyDefined": {
            "Fn::Not": [{
                "Fn::Equals": [{
                    "Ref": "ApiKey"
                }, ""]
            }]
        }
    },
    "Resources": {
        "furnaceIgniteSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": {
                    "Fn::Join": ["-", [{
                        "Ref": "AWS::StackName"
                    }, "furnaceIgniteSG"]]
                },
                "GroupName": {
                    "Fn::Join": ["-", [{
                        "Ref": "AWS::StackName"
                    }, "furnaceIgniteSG"]]
                },
                "SecurityGroupIngress": [{
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIpv6": "::/0"
                    }
                ]
            }
        },
        "furnaceIgniteECS": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": {
                    "Fn::Join": ["-", [{
                        "Ref": "AWS::StackName"
                    }, {
                        "Ref": "ClusterName"
                    }]]
                }
            }
        },
        "furnaceIgniteInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "furnaceIgniteInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": ["RegionMap", {
                        "Ref": "AWS::Region"
                    }, "AMI"]
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": ["-", [{
                            "Ref": "AWS::StackName"
                        }, {
                            "Ref": "ClusterName"
                        }]]
                    }
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo ECS_CLUSTER=",
                                {
                                    "Fn::Join": ["-", [{
                                        "Ref": "AWS::StackName"
                                    }, {
                                        "Ref": "ClusterName"
                                    }]]
                                },
                                " >> /etc/ecs/ecs.config\n",
                                "echo ECS_ENABLE_TASK_IAM_ROLE=true >> /etc/ecs/ecs.config"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "ECSInstanceType"
                },
                "SecurityGroupIds": [{
                    "Ref": "furnaceIgniteSecurityGroup"
                }],
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                }
            }
        },
        "furnaceIgniteInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "furnaceIgniteRole"
                }]
            }
        },
        "furnaceIgniteRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
                    "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.10.0.0/16",
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": ["-", [{
                            "Ref": "AWS::StackName"
                        }, "furnaceIgniteVPC"]]
                    }
                }]
            }
        },
        "PrivateSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.10.0.0/24",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": ["-", [{
                            "Ref": "AWS::StackName"
                        }, "furnaceIgnitePrivateSubnet"]]
                    }
                }]
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.10.1.0/24",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": ["-", [{
                            "Ref": "AWS::StackName"
                        }, "furnaceIgnitePublicSubnet"]]
                    }
                }],
                "MapPublicIpOnLaunch": true
            }
        },
        "PrivateSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": ["-", [{
                            "Ref": "AWS::StackName"
                        }, "furnaceIgnitePrivateRT"]]
                    }
                }]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": ["-", [{
                            "Ref": "AWS::StackName"
                        }, "furnaceIgnitePublicRT"]]
                    }
                }]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": ["-", [{
                            "Ref": "AWS::StackName"
                        }, "furnaceIgniteInternetGateway"]]
                    }
                }]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "NATGW": {
            "DependsOn": [
                "InternetGateway"
            ],
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": ["-", [{
                            "Ref": "AWS::StackName"
                        }, "furnaceIgniteNATGw"]]
                    }
                }]
            }
        },
        "EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "PrivateDefaultRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGW"
                }
            }
        },
        "PublicDefaultRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "updateStackTask": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Name": {
                        "Ref": "TaskContainerName"
                    },
                    "Image": {
                        "Ref": "TaskContainerImage"
                    },
                    "Cpu": "1",
                    "Memory": "768",
                    "Essential": true,
                    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": {
                                "Fn::Join": ["", ["/ecs/", {
                                    "Fn::Join": ["-", [{
                                        "Ref": "AWS::StackName"
                                    }, {
                                        "Ref": "TaskName"
                                    }]]
                                }]]
                            },
                            "awslogs-region": {
                                "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "ecs"
                        }
                    }
                }],
                "NetworkMode": "bridge",
                "Family": {
                    "Fn::Join": ["-", [{
                        "Ref": "AWS::StackName"
                    }, {
                        "Ref": "TaskName"
                    }]]
                },
                "TaskRoleArn": {
                    "Fn::GetAtt": [
                        "updateStackTaskRole",
                        "Arn"
                    ]
                }
            }
        },
        "updateStackTaskRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ecs-tasks.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "updateStackTaskRolePolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Fn::If": ["NpmOrGitDefined",
                                    {
                                        "Effect": "Allow",
                                        "Action": "secretsmanager:GetSecretValue",
                                        "Resource": [{
                                                "Fn::If": ["GitTokenDefined", {
                                                    "Ref": "gitTokenSecret"
                                                }, {
                                                    "Ref": "AWS::NoValue"
                                                }]
                                            },
                                            {
                                                "Fn::If": ["NpmTokenDefined", {
                                                    "Ref": "npmTokenSecret"
                                                }, {
                                                    "Ref": "AWS::NoValue"
                                                }]
                                            }
                                        ]
                                    }, {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "lambda:*",
                                    "kinesis:*",
                                    "iam:*",
                                    "s3:*",
                                    "es:*",
                                    "firehose:*",
                                    "redshift:*",
                                    "dynamodb:*"
                                ],
                                "Resource": [{
                                        "Fn::Join": [":", ["arn:aws:lambda", {
                                            "Ref": "AWS::Region"
                                        }, {
                                            "Ref": "AWS::AccountId"
                                        }, "*"]]
                                    },
                                    {
                                        "Fn::Join": [":", ["arn:aws:kinesis", {
                                            "Ref": "AWS::Region"
                                        }, {
                                            "Ref": "AWS::AccountId"
                                        }, "*"]]
                                    },
                                    {
                                        "Fn::Join": [":", ["arn:aws:firehose", {
                                            "Ref": "AWS::Region"
                                        }, {
                                            "Ref": "AWS::AccountId"
                                        }, "*"]]
                                    },
                                    {
                                        "Fn::Join": [":", ["arn:aws:redshift", {
                                            "Ref": "AWS::Region"
                                        }, {
                                            "Ref": "AWS::AccountId"
                                        }, "*", "*"]]
                                    },
                                    {
                                        "Fn::Join": [":", ["arn:aws:es", {
                                            "Ref": "AWS::Region"
                                        }, {
                                            "Ref": "AWS::AccountId"
                                        }, "*"]]
                                    },
                                    {
                                        "Fn::Join": [":", ["arn:aws:s3::", "*"]]
                                    },
                                    {
                                        "Fn::Join": [":", ["arn:aws:iam:", {
                                            "Ref": "AWS::AccountId"
                                        }, "*"]]
                                    },
                                    {
                                        "Fn::Join": [":", ["arn:aws:dynamodb", {
                                            "Ref": "AWS::Region"
                                        }, {
                                            "Ref": "AWS::AccountId"
                                        }, "*"]]
                                    }
                                ]
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "lambda:CreateEventSourceMapping",
                                    "lambda:DeleteEventSourceMapping",
                                    "lambda:UpdateEventSourceMapping",
                                    "lambda:GetEventSourceMapping",
                                    "ec2:DescribeAccountAttributes",
                                    "ec2:DescribeAddresses",
                                    "ec2:DescribeAvailabilityZones",
                                    "ec2:DescribeSecurityGroups",
                                    "ec2:DescribeSubnets",
                                    "ec2:DescribeVpcs",
                                    "ec2:DescribeInternetGateways",
                                    "es:ListDomainNames",
                                    "sns:CreateTopic",
                                    "sns:Get*",
                                    "sns:List*",
                                    "cloudwatch:Describe*",
                                    "cloudwatch:Get*",
                                    "cloudwatch:List*",
                                    "cloudwatch:PutMetricAlarm",
                                    "cloudwatch:EnableAlarmActions",
                                    "cloudwatch:DisableAlarmActions",
                                    "elasticache:CreateCacheCluster",
                                    "elasticache:DescribeCacheClusters",
                                    "ssm:DescribeParameters"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "secretsmanager:GetSecretValue"
                                ],
                                "Resource": {
                                    "Fn::Join": ["", ["arn:aws:secretsmanager:", {
                                        "Ref": "AWS::Region"
                                    }, ":", {
                                        "Ref": "AWS::AccountId"
                                    }, ":secret:", {
                                        "Ref": "AWS::StackName"
                                    }, "/*"]]
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ssm:DeleteParameter",
                                    "ssm:DeleteParameters",
                                    "ssm:GetParameter",
                                    "ssm:GetParameters",
                                    "ssm:GetParametersByPath",
                                    "ssm:GetParameterHistory",
                                    "ssm:PutParameter",
                                    "ssm:ListTagsForResource"
                                ],
                                "Resource": {
                                    "Fn::Join": ["", ["arn:aws:ssm:", {
                                        "Ref": "AWS::Region"
                                    }, ":", {
                                        "Ref": "AWS::AccountId"
                                    }, ":parameter/", {
                                        "Ref": "AWS::StackName"
                                    }, "/*"]]
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "kms:Encrypt",
                                    "kms:Decrypt"
                                ],
                                "Resource": {
                                    "Fn::GetAtt": ["stateKMS", "Arn"]
                                }
                            }
                        ]
                    }
                }]
            }
        },
        "updateStackTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": ["", ["/ecs/", {
                        "Fn::Join": ["-", [{
                            "Ref": "AWS::StackName"
                        }, {
                            "Ref": "TaskName"
                        }]]
                    }]]
                }
            }
        },
        "deployExecLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "lambda.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Policies": [{
                    "PolicyName": "deployExecLambdaRolePolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ecs:SubmitTaskStateChange",
                                    "ecs:RunTask",
                                    "ecs:StartTask",
                                    "ecs:StopTask"
                                ],
                                "Resource": "arn:aws:ecs:*:*:*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "iam:GetRole",
                                    "iam:PassRole"
                                ],
                                "Resource": {
                                    "Fn::GetAtt": [
                                        "updateStackTaskRole",
                                        "Arn"
                                    ]
                                }
                            }
                        ]
                    }
                }]
            }
        },
        "deployExecLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "deployExecLambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Ref": "BootstrapCodeBucketName"
                    },
                    "S3Key": "deploy-exec"
                },
                "Description": "Lambda function to run the task to deploy Furnace",
                "FunctionName": {
                    "Fn::Join": ["-", [{
                        "Ref": "AWS::StackName"
                    }, "deployExec"]]
                },
                "Environment": {
                    "Variables": {
                        "TASK_DEFINITION": {
                            "Fn::Join": ["-", [{
                                "Ref": "AWS::StackName"
                            }, {
                                "Ref": "TaskName"
                            }]]
                        },
                        "CONTAINER_NAME": {
                            "Ref": "TaskContainerName"
                        },
                        "GIT_USERNAME": {
                            "Fn::If": ["GitUsernameDefined", {
                                "Ref": "GitUsername"
                            }, {
                                "Ref": "AWS::NoValue"
                            }]
                        },
                        "CLUSTER": {
                            "Fn::Join": ["-", [{
                                "Ref": "AWS::StackName"
                            }, {
                                "Ref": "ClusterName"
                            }]]
                        },
                        "BUILD_BUCKET": {
                            "Ref": "ArtifactBucket"
                        },
                        "PLATFORM": "aws",
                        "FURNACE_INSTANCE": {
                            "Ref": "AWS::StackName"
                        },
                        "SOPS_KMS_ARN": {
                            "Fn::GetAtt": ["stateKMS", "Arn"]
                        }
                    }
                },
                "Runtime": "nodejs8.10",
                "Timeout": 30,
                "MemorySize": 128
            }
        },
        "deployExecLambdaSubscription": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
                "Protocol": "lambda",
                "Endpoint": {
                    "Fn::GetAtt": [
                        "deployExecLambda",
                        "Arn"
                    ]
                },
                "TopicArn": {
                    "Ref": "FurnaceSNSTopic"
                }
            }
        },
        "FurnaceSNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "TopicName": {
                    "Fn::Join": ["-", [{
                        "Ref": "AWS::StackName"
                    }, "FurnaceStackUpdates"]]
                }
            }
        },
        "deployTriggerLambda": {
            "DependsOn": ["FurnaceSNSTopic"],
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "BootstrapCodeBucketName"
                    },
                    "S3Key": "deploy-trigger"
                },
                "Description": "Lambda function to trigger the deployment of Furnace",
                "FunctionName": {
                    "Fn::Join": ["-", [{
                        "Ref": "AWS::StackName"
                    }, "deployTrigger"]]
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": ["deployTriggerLambdaRole", "Arn"]
                },
                "Runtime": "nodejs8.10",
                "Timeout": 30,
                "MemorySize": 128,
                "Environment": {
                    "Variables": {
                        "TOPIC": {
                            "Ref": "FurnaceSNSTopic"
                        },
                        "FURNACE_INSTANCE": {
                            "Ref": "AWS::StackName"
                        }
                    }
                }
            }
        },
        "ArtifactBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "ArtifactBucketName"
                }
            }
        },
        "deployTriggerLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Policies": [{
                    "PolicyName": "deployTriggerLambdaRolePolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": "secretsmanager:GetSecretValue",
                            "Resource": [{
                                    "Fn::If": ["GitTokenDefined", {
                                        "Ref": "gitTokenSecret"
                                    }, {
                                        "Ref": "AWS::NoValue"
                                    }]
                                }, {
                                    "Fn::If": ["GitHookSecretDefined", {
                                        "Ref": "gitHookSecretSecret"
                                    }, {
                                        "Ref": "AWS::NoValue"
                                    }]
                                },
                                {
                                    "Ref": "apiKeySecret"
                                }
                            ]
                        }]
                    }
                }],
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
                ]
            }
        },
        "hookResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "api"
                },
                "PathPart": "hook",
                "ParentId": {
                    "Fn::GetAtt": [
                        "api",
                        "RootResourceId"
                    ]
                }
            }
        },
        "apiResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "api"
                },
                "PathPart": "api",
                "ParentId": {
                    "Fn::GetAtt": [
                        "api",
                        "RootResourceId"
                    ]
                }
            }
        },
        "deployResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "PathPart": "deploy",
                "ParentId": {
                    "Ref": "apiResource"
                },
                "RestApiId": {
                    "Ref": "api"
                }
            }
        },
        "deployPOST": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RestApiId": {
                    "Ref": "api"
                },
                "ResourceId": {
                    "Ref": "deployResource"
                },
                "AuthorizationType": "NONE",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": ["",
                            ["arn:aws:apigateway:", {
                                "Ref": "AWS::Region"
                            }, ":lambda:path/2015-03-31/functions/", {
                                "Fn::GetAtt": ["deployTriggerLambda", "Arn"]
                            }, "/invocations"]
                        ]
                    }
                }
            }
        },
        "hookPOST": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RestApiId": {
                    "Ref": "api"
                },
                "ResourceId": {
                    "Ref": "hookResource"
                },
                "AuthorizationType": "NONE",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": ["",
                            ["arn:aws:apigateway:", {
                                "Ref": "AWS::Region"
                            }, ":lambda:path/2015-03-31/functions/", {
                                "Fn::GetAtt": ["deployTriggerLambda", "Arn"]
                            }, "/invocations"]
                        ]
                    }
                }
            }
        },
        "api": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {
                    "Fn::Join": ["", ["Deploy API (", {
                        "Ref": "AWS::StackName"
                    }, ")"]]
                }
            }
        },
        "apiGatewayCloudWatchLogsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["apigateway.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Policies": [{
                    "PolicyName": "ApiGatewayLogsPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents",
                                "logs:GetLogEvents",
                                "logs:FilterLogEvents"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },
        "apiGatewayAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
                "CloudWatchRoleArn": {
                    "Fn::GetAtt": ["apiGatewayCloudWatchLogsRole", "Arn"]
                }
            }
        },
        "apiStage": {
            "DependsOn": ["apiGatewayAccount"],
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "apiDeployment"
                },
                "MethodSettings": [{
                    "DataTraceEnabled": true,
                    "HttpMethod": "*",
                    "LoggingLevel": "INFO",
                    "ResourcePath": "/*"
                }],
                "RestApiId": {
                    "Ref": "api"
                },
                "StageName": "v1"
            }
        },
        "apiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": ["deployPOST", "hookPOST"],
            "Properties": {
                "RestApiId": {
                    "Ref": "api"
                }
            }
        },
        "deployTriggerPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "api"
                            },
                            "/*"
                        ]
                    ]
                },
                "FunctionName": {
                    "Fn::GetAtt": ["deployTriggerLambda", "Arn"]
                },
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "deployExecLambdaInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "FurnaceSNSTopic"
                },
                "FunctionName": {
                    "Fn::GetAtt": ["deployExecLambda", "Arn"]
                }
            }
        },
        "stateKMS" : {
            "Type" : "AWS::KMS::Key",
            "Properties" : {
              "Description" : {"Ref": "AWS::StackName"},
              "KeyPolicy" : {
                "Version": "2012-10-17",
                "Id": "key-default-1",
                "Statement": [
                  {
                    "Sid": "Enable IAM User Permissions",
                    "Effect": "Allow",
                    "Principal": {"AWS": {"Fn::Join": [":", ["arn:aws:iam:", {
                        "Ref": "AWS::AccountId"
                    }, "root"]]}},
                    "Action": "kms:*",
                    "Resource": "*"
                  }]
              }
            }
        },
        "npmTokenSecret": {
            "Type": "AWS::SecretsManager::Secret",
            "Condition": "NpmTokenDefined",
            "Properties": {
                "Description": "NPM Token for private repos",
                "SecretString": {
                    "Ref": "NpmToken"
                },
                "Name": {
                    "Fn::Join": ["", [{
                        "Ref": "AWS::StackName"
                    }, "/NpmToken"]]
                }
            }
        },
        "gitTokenSecret": {
            "Type": "AWS::SecretsManager::Secret",
            "Condition": "GitTokenDefined",
            "Properties": {
                "Description": "Git Token for private repos",
                "SecretString": {
                    "Ref": "GitToken"
                },
                "Name": {
                    "Fn::Join": ["", [{
                        "Ref": "AWS::StackName"
                    }, "/GitToken"]]
                }
            }
        },
        "gitHookSecretSecret": {
            "Type": "AWS::SecretsManager::Secret",
            "Condition": "GitHookSecretDefined",
            "Properties": {
                "Description": "Git secret for Hooks",
                "SecretString": {
                    "Ref": "GitHookSecret"
                },
                "Name": {
                    "Fn::Join": ["", [{
                        "Ref": "AWS::StackName"
                    }, "/GitHookSecret"]]
                }
            }
        },
        "apiKeySecret": {
            "Type": "AWS::SecretsManager::Secret",
            "Condition": "ApiKeyDefined",
            "Properties": {
                "Description": "API key for CLI auth",
                "SecretString": {
                    "Ref": "ApiKey"
                },
                "Name": {
                    "Fn::Join": ["", [{
                        "Ref": "AWS::StackName"
                    }, "/ApiKey"]]
                }
            }
        }
    },
    "Outputs": {
        "apiURL": {
            "Description": "The URL of the endpoint to send request to trigger deployments",
            "Value": {
                "Fn::Join": ["", ["https://", {
                    "Ref": "api"
                }, ".execute-api.", {
                    "Ref": "AWS::Region"
                }, ".amazonaws.com/v1"]]
            }
        }
    }
}